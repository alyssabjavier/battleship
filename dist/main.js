(()=>{var t={409:t=>{class r{constructor(){this.grid=this.initializeGrid(),this.ships=[]}initializeGrid(){const t=new Array(10);for(let r=0;r<10;r++){t[r]=new Array(10);for(let i=0;i<10;i++)t[r][i]=null}return t}placeShip(t,r,i,s){r-=1,i-=1;const e=t.length;if(this.ships.push(t),"horizontal"==s){if(r+e>10)return"error - ship cannot be placed outside of bounds of the gameboard";this.grid[i][r]=t;for(let s=0;s<e;s++)this.grid[i][r+s]=t}else if("vertical"==s){if(i+e>10)return"error - ship cannot be placed outside of bounds of the gameboard";this.grid[i][r]=t;for(let s=0;s<e;s++)this.grid[i+s][r]=t}return this.grid}receiveAttack(t,r){return t-=1,r-=1,"M"==this.grid[r][t]||"H"==this.grid[r][t]?"error - coordinate already marked":(null==this.grid[r][t]?this.grid[r][t]="M":(this.grid[r][t].hit(),this.grid[r][t]="H"),this.grid)}areShipsSunk(){let t=0;return this.ships.forEach((r=>{r.sunkStatus&&t++})),t==this.ships.length}}const i=new class{constructor(t){this.type=t,this.board=new r}}("real");console.log(i),t.exports={Ship:class{constructor(t){this.length=t,this.hitCount=0,this.sunkStatus=this.isSunk()}hit(){this.hitCount++,this.sunkStatus=this.isSunk()}isSunk(){return this.hitCount>=this.length}},Gameboard:r}}},r={};function i(s){var e=r[s];if(void 0!==e)return e.exports;var o=r[s]={exports:{}};return t[s](o,o.exports,i),o.exports}i.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return i.d(r,{a:r}),r},i.d=(t,r)=>{for(var s in r)i.o(r,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},i.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),(()=>{"use strict";i(409),console.log("hello world 2")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,