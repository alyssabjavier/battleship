(()=>{"use strict";var e={208:(e,t,r)=>{r.d(t,{A:()=>o});var n=r(354),i=r.n(n),a=r(314),s=r.n(a)()(i());s.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n}\n\n.user-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.ai-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.grid-cell {\n    border: 1px solid #ccc;\n    min-height: 30px;\n    min-width: 30px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;;AAEA;IACI;uBACmB;IACnB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI;uBACmB;IACnB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;IACtB,gBAAgB;IAChB,eAAe;AACnB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n}\n\n.user-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.ai-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.grid-cell {\n    border: 1px solid #ccc;\n    min-height: 30px;\n    min-width: 30px;\n}"],sourceRoot:""}]);const o=s},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);n&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},s=[],o=0;o<e.length;o++){var l=e[o],c=n.base?l[0]+n.base:l[0],d=a[c]||0,p="".concat(c," ").concat(d);a[c]=d+1;var u=r(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var f=i(h,n);n.byIndex=o,t.splice(o,0,{identifier:p,updater:f,references:1})}s.push(p)}return s}function i(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,i){var a=n(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var o=r(a[s]);t[o].references--}for(var l=n(e,i),c=0;c<a.length;c++){var d=r(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},659:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(72),t=r.n(e),n=r(825),i=r.n(n),a=r(659),s=r.n(a),o=r(56),l=r.n(o),c=r(540),d=r.n(c),p=r(113),u=r.n(p),h=r(208),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),t()(h.A,f),h.A&&h.A.locals&&h.A.locals;class A{constructor(e,t){this.type=e,this.length=t,this.hitCount=0,this.sunkStatus=this.isSunk(),this.isPlaced=!1}hit(){this.hitCount++,this.sunkStatus=this.isSunk(),console.log(`sunkStatus:${this.sunkStatus}`),console.log(`hitCount:${this.hitCount}`)}isSunk(){return this.hitCount>=this.length}}class y{constructor(){this.grid=this.initializeGrid(),this.ships=this.initializeShips()}initializeGrid(){const e=new Array(10);for(let t=0;t<10;t++){e[t]=new Array(10);for(let r=0;r<10;r++)e[t][r]=null}return e}initializeShips(){const e=[],t=new A("kayak",2),r=new A("sailboat",3),n=new A("pontoon",3),i=new A("yacht",4),a=new A("cruise",5);return e.push(t),e.push(r),e.push(n),e.push(i),e.push(a),e}isOverlapping(e,t,r,n){const i=e.length;if("horizontal"===n){for(let e=0;e<i;e++)if(null!=this.grid[t][r+e])return!0}else if("vertical"===n)for(let e=0;e<i;e++)if(null!=this.grid[t+e][r])return!0;return!1}placeShip(e,t,r,n){const i=e.length;if("horizontal"===n&&r+i>10||"vertical"===n&&t+i>10)return"error - ship cannot be placed outside of bounds of the gameboard";if(this.isOverlapping(e,t,r,n))return"error - ship overlaps with another ship";for(let a=0;a<i;a++)"horizontal"===n?this.grid[t][r+a]=e:"vertical"===n&&(this.grid[t+a][r]=e);return e.isPlaced=!0,this.grid}receiveAttack(e,t){return"M"==this.grid[e][t]||"H"==this.grid[e][t]?"error - coordinate already marked":(null==this.grid[e][t]?this.grid[e][t]="M":(this.grid[e][t].hit(),this.grid[e][t]="H",this.areShipsSunk()),this.grid)}areShipsSunk(){let e=0;return this.ships.forEach((t=>{t.sunkStatus&&e++})),console.log(`counter:${e}`),console.log(`areShipsSunk:${e==this.ships.length}`),e==this.ships.length}}class g{constructor(e){this.type=e,this.board=new y}randomPlaceShip(e){function t(){return Math.floor(10*Math.random())}this.board.placeShip(e,t(),t(),function(){const e=["horizontal","vertical"];return e[Math.floor(Math.random()*e.length)]}())}AIPlaceShips(){this.board.ships.forEach((e=>{for(;!e.isPlaced;)this.randomPlaceShip(e)}))}}document.querySelector(".container");const m=document.querySelector("#user-title");console.log(m);const v=document.querySelector("#ai-title");console.log(v);const b=document.querySelector(".user-board-div"),C=document.querySelector(".ai-board-div"),S=(document.querySelectorAll(".ship-row"),document.querySelectorAll(".ship-column"),document.querySelectorAll(".ship-direction"),document.querySelectorAll(".ship-submit")),I={playerUser:null,playerAI:null,activePlayer:null,initializeGame(){this.playerUser=new g("User"),this.playerAI=new g("AI"),this.activePlayer=this.playerUser,this.generateGameboard(b,this.playerUser),this.generateGameboard(C,this.playerAI)},generateGridCell(e,t,r,n){const i=document.createElement("div");i.classList.add("grid-cell"),i.setAttribute("data-player",n.type),i.setAttribute("data-row",e),i.setAttribute("data-column",t),i.textContent="",r.appendChild(i),i.addEventListener("click",(e=>this.handleBoardClick(e)))},generateGameboard(e,t){for(let r=0;r<10;r++)for(let n=0;n<10;n++)this.generateGridCell(r,n,e,t)},updateCell(e,t,r){const n=document.querySelector(`.grid-cell[data-player="${r.type}"][data-row="${e}"][data-column="${t}"]`);r==this.playerUser&&(null===r.board.grid[e][t]||"H"===r.board.grid[e][t]||"M"===r.board.grid[e][t]?n.textContent=r.board.grid[e][t]:n.textContent=`${r.board.grid[e][t].type}`),r==this.playerAI&&(null===r.board.grid[e][t]||"H"===r.board.grid[e][t]||"M"===r.board.grid[e][t]?n.textContent=r.board.grid[e][t]:n.textContent=null)},handleBoardClick(e){const t=e.target.getAttribute("data-row"),r=e.target.getAttribute("data-column"),n=e.target.getAttribute("data-player");if("User"==n)this.activePlayer==this.playerAI&&(this.playerUser.board.receiveAttack(t,r),this.playerUser.board.areShipsSunk(),this.playerUser.board.areShipsSunk()&&this.displayVictory(this.playerAI),this.updateCell(t,r,this.playerUser),this.activePlayer=this.playerUser);else{if("AI"!=n)return null;this.activePlayer==this.playerUser&&(this.playerAI.board.receiveAttack(t,r),this.playerAI.board.areShipsSunk()&&this.displayVictory(this.playerUser),this.updateCell(t,r,this.playerAI),this.activePlayer=this.playerAI,this.AIAttackUser())}},displayVictory(e){e==this.playerAI?v.textContent="AI wins!":e==this.playerUser&&(m.textContent="you win!")},AIAttackUser(){function e(){return Math.floor(10*Math.random())}let t=e(),r=e(),n=this.playerUser.board.grid[t][r];"H"==n||"M"==n?this.AIAttackUser():(this.playerUser.board.receiveAttack(t,r),this.updateCell(t,r,this.playerUser),this.activePlayer=this.playerUser)},placeAndRenderShip(e){const t=e.target.getAttribute("data-ship"),r=e.target.getAttribute("data-index"),n=this.playerUser.board.ships[r],i=parseInt(document.querySelector(`.ship-row.${t}`).value,10)-1,a=parseInt(document.querySelector(`.ship-column.${t}`).value,10)-1,s=document.querySelector(`.ship-direction.${t}`).value;if(this.playerUser.board.placeShip(n,i,a,s),"horizontal"==s)for(let e=0;e<n.length;e++)this.updateCell(i,a+e,this.playerUser);else if("vertical"==s)for(let e=0;e<n.length;e++)this.updateCell(i+e,a,this.playerUser);document.querySelector(`.ship-submit[data-ship="${t}"`)}};function x(e){I.placeAndRenderShip(e)}S.forEach((e=>{e.addEventListener("click",x)})),I.initializeGame(),I.playerAI.AIPlaceShips(),console.log(I.playerAI.board),console.log("hello world 7")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,