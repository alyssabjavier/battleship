(()=>{"use strict";var e={208:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),a=r.n(n),i=r(314),o=r.n(i)()(a());o.push([e.id,".container {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n}\n\n.user-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.ai-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.grid-cell {\n    border: 1px solid #ccc;\n    min-height: 30px;\n    min-width: 30px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;;AAEA;IACI;uBACmB;IACnB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI;uBACmB;IACnB,aAAa;IACb,sCAAsC;IACtC,mCAAmC;AACvC;;AAEA;IACI,sBAAsB;IACtB,gBAAgB;IAChB,eAAe;AACnB",sourcesContent:[".container {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n}\n\n.user-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.ai-board-div {\n    /* max-height: 600px;\n    max-width: 600px; */\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n}\n\n.grid-cell {\n    border: 1px solid #ccc;\n    min-height: 30px;\n    min-width: 30px;\n}"],sourceRoot:""}]);const s=o},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);n&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},354:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},o=[],s=0;s<e.length;s++){var l=e[s],d=n.base?l[0]+n.base:l[0],c=i[d]||0,p="".concat(d," ").concat(c);i[d]=c+1;var u=r(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var f=a(h,n);n.byIndex=s,t.splice(s,0,{identifier:p,updater:f,references:1})}o.push(p)}return o}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var i=n(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=r(i[o]);t[s].references--}for(var l=n(e,a),d=0;d<i.length;d++){var c=r(i[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},659:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(72),t=r.n(e),n=r(825),a=r.n(n),i=r(659),o=r.n(i),s=r(56),l=r.n(s),d=r(540),c=r.n(d),p=r(113),u=r.n(p),h=r(208),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=o().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=c(),t()(h.A,f),h.A&&h.A.locals&&h.A.locals;class A{constructor(e,t){this.type=e,this.length=t,this.hitCount=0,this.sunkStatus=this.isSunk()}hit(){this.hitCount++,this.sunkStatus=this.isSunk()}isSunk(){return this.hitCount>=this.length}}class g{constructor(){this.grid=this.initializeGrid(),this.ships=this.initializeShips()}initializeGrid(){const e=new Array(10);for(let t=0;t<10;t++){e[t]=new Array(10);for(let r=0;r<10;r++)e[t][r]=null}return e}initializeShips(){const e=[],t=new A("kayak",2),r=new A("sailboat",3),n=new A("pontoon",3),a=new A("yacht",4),i=new A("cruise",5);return e.push(t),e.push(r),e.push(n),e.push(a),e.push(i),e}placeShip(e,t,r,n){r-=1,t-=1;const a=e.length;if(this.ships.push(e),"horizontal"==n){if(r+a>10)return"error - ship cannot be placed outside of bounds of the gameboard";this.grid[t][r]=e;for(let n=0;n<a;n++)this.grid[t][r+n]=e}else if("vertical"==n){if(t+a>10)return"error - ship cannot be placed outside of bounds of the gameboard";this.grid[t][r]=e;for(let n=0;n<a;n++)this.grid[t+n][r]=e}return this.grid}receiveAttack(e,t){return t-=1,e-=1,"M"==this.grid[e][t]||"H"==this.grid[e][t]?"error - coordinate already marked":(null==this.grid[e][t]?this.grid[e][t]="M":(this.grid[e][t].hit(),this.grid[e][t]="H"),this.grid)}areShipsSunk(){let e=0;return this.ships.forEach((t=>{t.sunkStatus&&e++})),e==this.ships.length}}class m{constructor(e){this.type=e,this.board=new g}}document.querySelector(".container"),document.querySelector(".user-ui"),document.querySelector(".ai-ui");const y=document.querySelector(".user-board-div"),v=document.querySelector(".ai-board-div"),b={playerUser:null,playerAI:null,activePlayer:null,initializeGame(){this.playerUser=new m("User"),this.playerAI=new m("AI"),this.generateGameboard(y,this.playerUser),this.generateGameboard(v,this.playerAI)},generateGridCell(e,t,r,n){const a=document.createElement("div");a.classList.add("grid-cell"),a.setAttribute("data-player",n.type),a.setAttribute("data-row",e+1),a.setAttribute("data-column",t+1),a.textContent="",r.appendChild(a),a.addEventListener("click",(e=>this.handleBoardClick(e)))},generateGameboard(e,t){for(let r=0;r<10;r++)for(let n=0;n<10;n++)this.generateGridCell(r,n,e,t)},updateCell(e,t,r){const n=document.querySelector(`.grid-cell[data-player="${r.type}"][data-row="${e}"][data-column="${t}"]`);r==this.playerUser&&(null===r.board.grid[e-1][t-1]||"H"===r.board.grid[e-1][t-1]||"M"===r.board.grid[e-1][t-1]?n.textContent=r.board.grid[e-1][t-1]:n.textContent=`${r.board.grid[e-1][t-1].type}`),r==this.playerAI&&(null===r.board.grid[e-1][t-1]||"H"===r.board.grid[e-1][t-1]||"M"===r.board.grid[e-1][t-1]?n.textContent=r.board.grid[e-1][t-1]:n.textContent=null)},handleBoardClick(e){const t=e.target.getAttribute("data-row"),r=e.target.getAttribute("data-column"),n=e.target.getAttribute("data-player");if("User"==n)this.playerUser.board.receiveAttack(t,r),this.updateCell(t,r,this.playerUser);else{if("AI"!=n)return null;this.playerAI.board.receiveAttack(t,r),this.updateCell(t,r,this.playerAI)}}};b.initializeGame(),console.log(b.playerUser),b.playerUser.board.placeShip(b.playerUser.board.ships[1],2,3,"horizontal"),console.log(b.playerUser.board),b.updateCell(2,3,b.playerUser),b.updateCell(2,4,b.playerUser),b.updateCell(2,5,b.playerUser),b.playerUser.board.receiveAttack(2,4),console.log(b.playerUser.board.grid),b.updateCell(2,4,b.playerUser),b.playerAI.board.placeShip(b.playerUser.board.ships[1],5,5,"horizontal"),b.playerAI.board.receiveAttack(5,5),b.updateCell(5,5,b.playerAI),b.updateCell(5,6,b.playerAI),b.playerUser.board.receiveAttack(1,1),b.updateCell(1,1,b.playerUser),console.log("hello world 5")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,